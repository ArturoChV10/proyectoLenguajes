mostrar_ahorcado :-
    write('========='), nl,
    write(',---+'), nl,
    write('|   |'), nl,
    write('|   o'), nl,
    write('|  /|\\'), nl,
    write('|  / \\'), nl,
    write('|'), nl,
    write('========='), nl.


palabra_escogida_aleatoriamente(Palabra) :-
    palabras_guardadas(Lista_palabras),
    random_member(Palabra, Lista_palabras).

validar_palabra([]).
validar_palabra([Cabeza | Resto]) :-
    char_type(Cabeza, alpha), % verifica que la cabeza de la lista sea una letra
    validar_palabra(Resto). % recursivamente valida el resto de la lista

% Recibe una palabra y verifica si es vÃ¡lida
palabra_ingresada(Palabra) :-
    write('Ingrese una palabra (debe contener solamente letras y no puede incluir espacios): '), nl,
    read_line_to_string(user_input, Entrada),
    string_lower(Entrada, EntradaMin),
    string_chars(EntradaMin, ListaCaracteres),
    (validar_palabra(ListaCaracteres) ->
        atom_chars(Palabra, ListaCaracteres);

        write('Palabra invÃ¡lida, solo se permiten letras: '), nl,
        palabra_ingresada(Palabra)
    ).

% Valida si existe una letra en una 'lista', la cual corresponde a un
% átomo
existe_letra(Letra, Palabra) :-
    atom_chars(Palabra, ListaLetras),
    (member(Letra, ListaLetras))
    -> write('La letra '), write(Letra), write(' se encuentra en la palabra');
       write('La letra '), write(Letra), write(' NO se encuentra en la palabra').

% Ciclo principal que le pide una letra todo el rato y valida si existe
% en la palabra
ciclo_juego(Palabra) :-
    write('Escoja una letra: '), nl,
    read_line_to_string(user_input, LetraStr),
    string_chars(LetraStr, [Letra|_]), % Tomar el primer caracter de la cadena de texto ingresada
    (char_type(Letra, alpha) ->
        existe_letra(Letra, Palabra), ciclo_juego(Palabra);
        write('Por favor ingrese solo una letra.'), nl, ciclo_juego(Palabra)
    ).

palabras_guardadas([
    ranacalva,
    profe,
    ponganos,
    cien,
    porfa,
    brayan,
    probabilidad,
    calvarana,
    iguanapelona,
    pelonaiguana
]).


elegir_inicio_juego(Palabra) :-
    write('Desea jugar con una palabra aleatoria o ingresar una palabra?: '), nl,
    write('1. Palabra aleatoria'), nl,
    write('2. Ingresar palabra'), nl,
    write('Seleccione una opción: '),
    read_line_to_string(user_input, Opcion),
    (
        Opcion = "1" ->
            palabra_escogida_aleatoriamente(Palabra);

        Opcion = "2" ->
            palabra_ingresada(Palabra), ciclo_juego(Palabra);
        write('Opcion invalida'),
        elegir_inicio_juego(Palabra)

    ).

jugar :-
    elegir_inicio_juego(Palabra),
    write('Comienza el juego!'), nl,
    ciclo_juego(Palabra).
